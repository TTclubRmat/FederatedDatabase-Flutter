/*文件说明
定义了所有以federation为服务端的gRPC消息
*/

/*构建方法
python -m grpc_tools.protoc --proto_path=./protobuf --python_out=./FederatedDataBase --grpc_python_out=./FederatedDataBase federation.proto
*/
syntax = "proto3";

enum QueryType {
  Nearest = 0;
  AntiNearest = 1;
}

message CheckRequest {
  QueryType query_type = 1;     // 查询类型的枚举,包括最近邻查询Nearest和反向最近邻查询AntiNearest
  int32 position_x = 2;         // 待查点的横坐标
  int32 position_y = 3;         // 待查点的纵坐标
  int32 query_num = 4;          // 查询条数,最多为20,当query_type为反向最近邻时无需设置查询条数
  bool encrypt = 5;             // 布尔型变量,表示是否加密,当query_type为反向最近邻时仅支持非加密查询
}

message CheckResult {
  int32 position_x = 1;
  int32 position_y = 2;
  int32 database_id = 3;
}

message CheckResponse {
  repeated CheckResult results = 1;
}

message AddRequest {
  string address = 1;
}

enum AddResult {
  Fail = 0;
  Success = 1;
}

message AddResponse {
  AddResult add_result = 1;
}

message MapResponse {
  bytes map = 1;                 // 序列化后的图片的二进制流,前端需要复原成图片
}

// ======= 以下无需前端实现！ =======
// 因为需要有database到federation的请求,所以把定义也放在这里
message DistDiff {
  bytes dis_diff = 1;     // dis1-dis2
}
// 服务端解密后比较大小,dis1<dis2返回-1,反则返回1
message DiffResponse {
  int32 cmp_result = 1;
}

service FederationService {
  // 前端向federation发送的消息类型
  rpc CheckData (CheckRequest) returns (CheckResponse);
  rpc AddDatabase (AddRequest) returns (AddResponse);
  rpc GenerateMap (CheckResponse) returns (MapResponse);
  // database向federation发送的消息类型
  rpc CompareDist (DistDiff) returns (DiffResponse);
}
